{"ast":null,"code":"class WebSocketService {\n  constructor(url = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws') {\n    this.url = url;\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.listeners = new Map();\n    console.log('WebSocket URL:', this.url);\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.url);\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          this.notifyListeners('connection', {\n            status: 'connected'\n          });\n          resolve();\n        };\n        this.ws.onmessage = event => {\n          try {\n            const message = JSON.parse(event.data);\n            this.handleMessage(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        this.ws.onclose = event => {\n          console.log('WebSocket disconnected:', event.code, event.reason);\n          this.notifyListeners('connection', {\n            status: 'disconnected'\n          });\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            setTimeout(() => this.connect(), this.reconnectDelay * this.reconnectAttempts);\n          }\n        };\n        this.ws.onerror = error => {\n          console.error('WebSocket error:', error);\n          reject(error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  handleMessage(message) {\n    switch (message.type) {\n      case 'vitals_update':\n        this.notifyListeners('vitals_update', message.data);\n        break;\n      case 'status_change':\n        this.notifyListeners('status_change', {\n          patient_id: message.patient_id,\n          status: message.status,\n          reason: message.reason\n        });\n        break;\n      case 'treatment_decision':\n        this.notifyListeners('treatment_decision', message.data);\n        break;\n      case 'dispatch_decision':\n        this.notifyListeners('dispatch_decision', message.data);\n        break;\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n  notifyListeners(event, data) {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => callback(data));\n    }\n  }\n  getConnectionStatus() {\n    if (!this.ws) return 'disconnected';\n    return this.ws.readyState === WebSocket.OPEN ? 'connected' : 'connecting';\n  }\n  send(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n}\nexport default WebSocketService;","map":{"version":3,"names":["WebSocketService","constructor","url","process","env","REACT_APP_WS_URL","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","listeners","Map","console","log","connect","Promise","resolve","reject","WebSocket","onopen","notifyListeners","status","onmessage","event","message","JSON","parse","data","handleMessage","error","onclose","code","reason","setTimeout","onerror","disconnect","close","type","patient_id","warn","on","callback","has","set","get","push","off","callbacks","index","indexOf","splice","forEach","getConnectionStatus","readyState","OPEN","send","stringify"],"sources":["/Users/andreschnydercastellobranco/code/kpum-demo/frontend/src/services/websocket.ts"],"sourcesContent":["import { WebSocketMessage, ConnectionStatus } from '../types';\n\nclass WebSocketService {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private listeners: Map<string, ((data: any) => void)[]> = new Map();\n\n  constructor(private url: string = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws') {\n    console.log('WebSocket URL:', this.url);\n  }\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.url);\n\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          this.notifyListeners('connection', { status: 'connected' });\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            this.handleMessage(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        this.ws.onclose = (event) => {\n          console.log('WebSocket disconnected:', event.code, event.reason);\n          this.notifyListeners('connection', { status: 'disconnected' });\n          \n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            setTimeout(() => this.connect(), this.reconnectDelay * this.reconnectAttempts);\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          reject(error);\n        };\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  private handleMessage(message: WebSocketMessage): void {\n    switch (message.type) {\n      case 'vitals_update':\n        this.notifyListeners('vitals_update', message.data);\n        break;\n      case 'status_change':\n        this.notifyListeners('status_change', {\n          patient_id: message.patient_id,\n          status: message.status,\n          reason: message.reason,\n        });\n        break;\n      case 'treatment_decision':\n        this.notifyListeners('treatment_decision', message.data);\n        break;\n      case 'dispatch_decision':\n        this.notifyListeners('dispatch_decision', message.data);\n        break;\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n\n  on(event: string, callback: (data: any) => void): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback: (data: any) => void): void {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  private notifyListeners(event: string, data: any): void {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => callback(data));\n    }\n  }\n\n  getConnectionStatus(): ConnectionStatus {\n    if (!this.ws) return 'disconnected';\n    return this.ws.readyState === WebSocket.OPEN ? 'connected' : 'connecting';\n  }\n\n  send(message: any): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n}\n\nexport default WebSocketService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}